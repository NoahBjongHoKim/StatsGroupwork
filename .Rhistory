demo()
help("install.packages")
load("C:/Users/manth/OneDrive/University/ETHZ/Semester 1/Statistics 1/Project/ESS 2018-20231020/ESS_2018_CH.Rda")
View(ESS_2018_CH)
View(ESS_2018_CH)
ESS_2018_CH("polintr")
ESS_2018_CH["polintr"]
ESS_2018_CH["polintr"] == 1
pet_dogs <- c(breed, color, age, energy, gender)
pet_dogs <- cbind(breed, color, age, energy, gender)
pet_dogs <- data.frame(
Column1=breed,
Column2=color
Column3=age
Column4=energy
Column5=gender
)
pet_dogs <- data.frame(
Column1=breed,
Column2=color
Column3=age
Column4=energy
Column5=gender
)
pet_dogs <- data.frame(
Column1=breed,
Column2=color
Column3=age
Column4=energy
Column5=gender
)
pet_dogs <- data.frame(
Column1=breed,
Column2=color,
Column3=age,
Column4=energy,
Column5=gender
)
pet_dogs <- data.frame(
Column1=breed,
Column2=color,
Column3=age,
Column4=energy,
Column5=gender)
breed
print(breed)
breed <- c("P", "A")
breed
breed <- c("Pomerenaian", "Apso", "Dachshund", "Labrador", "Pug")
color <- c("White", "Gray", "Black", "Brown", "Gray")
age <- c(2, 2, 2, 3, 5)
energy <- c("High", "Moderate", "Mod", "High", "High")
gender <- c("Male", "Male", "Male", "Female", "Female")
pet_dogs <- data.frame(
Column1=breed,
Column2=color,
Column3=age,
Column4=energy,
Column5=gender)
pet_dogs
names(pet_dogs) <- c("Breed", "Colour", "Age", "Energy level", "Gender")
pet_dogs
set.seed(2)
v1 <- rnorm(20)
v2 <- <- 0.7 * v1 + 0.3 * rnorm(20)
v2 <- 0.7 * v1 + 0.3 * rnorm(20)
cor(v1, v2, method="pearson")
v1, v2
print(v1, v2)
v1
v2
v2 <- 0.7 * v1
cor(v1, v2, method="pearson")
v2 <- 0.3 * rnorm(20)
cor(v1, v2, method="pearson")
v2 <- 0.3 * rnorm(20)
cor(v1, v2, method="pearson")
v2 <- 0.7 * v1 + 0.3 * rnorm(20)
r <- cor(v1, v2, method="pearson")
summary(r)
r
dim(ESS_2018_CH)
load("C:\Users\manth\OneDrive\University\ETHZ\Semester 1\Statistics 1\Project\ESS 2018-20231020\ESS_2018_CH.Rda")
load("C:/Users/manth/OneDrive/University/ETHZ/Semester 1/Statistics 1/Project/ESS 2018-20231020\ESS_2018_CH.Rda")
load(r"C:/Users/manth/OneDrive/University/ETHZ/Semester 1/Statistics 1/Project/ESS 2018-20231020\ESS_2018_CH.Rda")
load("C:/Users/manth/OneDrive/University/ETHZ/Semester 1/Statistics 1/Project/ESS 2018-20231020/ESS_2018_CH.Rda")
dim(ESS_2018_CH)
View(pet_dogs)
ls()
rm("age", "breed", "color", "energy", "pet_dogs", "r", "v1", "v2")
rm("gender")
View(ESS_2018_CH)
library(ggplot2)
load("C:/Users/manth/OneDrive/University/ETHZ/Semester 1/Statistics 1/Project/ESS 2018-20231020/ESS_2018_CH.Rda")
ess <- ESS_2018_CH
ess$trstplc
v <- c(0:10)
library(data.table)
library(tidyverse)
install.packages("tidyverse")
setwd("C:Users\manth\Github\StatsGroupWork")
setwd("C:Users/manth/Github/StatsGroupWork")
setwd("C:/Users/manth/Github/StatsGroupWork")
dir
ls
save()
#filter data and create datasets East_Ger, West_Ger and Berlin
source('Code/filter_Data.R')
install.packages(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
############################# Fuctions
plot_distribution_histograms <- function(dataframe, name_index) {
# Plot histograms of individual trust indicators to see the distribution
file_directory <- paste0(directory, "/Distribution histograms/")
ggplot(dataframe, aes(x = factor(trstplt))) +
geom_bar(fill = "indianred3") +
labs(title="Trust in politicians",
x = "Response",
y = "Count")
file_name = paste0(file_directory,"Trust in politicians ",name_index,".png" )
ggsave(file_name, width = 6, height = 5)
ggplot(dataframe, aes(x = factor(trstprt))) +
geom_bar(fill = "dodgerblue3") +
labs(title="Trust in parties",
x = "Response",
y = "Count")
file_name = paste0(file_directory,"Trust in parties ",name_index,".png" )
ggsave(file_name, width = 6, height = 5)
ggplot(dataframe, aes(x = factor(trstprl))) +
geom_bar(fill = "darkseagreen3") +
labs(title = "Trust in parliament",
x = "Response",
y = "Count")
file_name = paste0(file_directory,"Trust in parliament ",name_index,".png" )
ggsave(file_name, width = 6, height = 5)
# Compute Cronbach's Alpha (result = 0.884, so quite good!)
filtered_dataframe <- dataframe %>%
dplyr::select(trstprl, trstplt, trstprt)
c_alpha <- cronbach.alpha(filtered_dataframe)
# Display the stacked Trust
filtered_dataframe_long <- gather(filtered_dataframe, key = "Variable", value = "Response", trstprl:trstprt)
custom_colors <- c("trstprl" = "darkseagreen3", "trstplt" = "indianred3", "trstprt" = "dodgerblue3")
custom_labels <- c("trstprl" = "Trust in Parliament", "trstplt" = "Trust in Politicians", "trstprt" = "Trust in Parties")
ggplot(filtered_dataframe_long, aes(x = Response, fill = Variable)) +
geom_bar(aes(fill = Variable)) +
scale_fill_manual(values = custom_colors, labels = custom_labels) +
labs(title = paste0("Distribution of responses to questions of trust in government, c_alpha =",c_alpha),
x = "Response",
y = "Count")
file_name = paste0(file_directory,"Total Trust ",name_index,".png" )
ggsave(file_name, width = 8, height = 5)
}
plot_scatterplots <- function(dataframe, name_index){
file_directory <- paste0(directory, "/Scatterplots/")
# Create a dataframe with the frequency of each value in the 'x' column
frequency_data <- dataframe %>%
group_by(polintr,total_trust) %>%
summarize(freq = n())
# Using ggplot2 with size based on frequency
ggplot(frequency_data, aes(x = polintr, y = total_trust, size = freq)) +
geom_point() +
labs(title = "Scatterplot with Point Size based on Frequency", x = "Political Interest", y = "Total Trust") +
scale_size_continuous(range = c(1, 8))  # Adjust the size range as needed
file_name = paste0(file_directory,"Political Interest Scatterplot ",name_index,".png" )
ggsave(file_name, width = 8, height = 5)
# Create a dataframe with the frequency of each value in the 'x' column
frequency_data <- dataframe %>%
group_by(prtvede2,total_trust) %>%
summarize(freq = n())
# Using ggplot2 with size based on frequency
ggplot(frequency_data, aes(x = prtvede2, y = total_trust, size = freq)) +
geom_point() +
labs(title = "Scatterplot with Point Size based on Frequency", x = "Party affiliation", y = "Total Trust") +
scale_size_continuous(range = c(1, 8))  # Adjust the size range as needed
file_name = paste0(file_directory,"Party Affiliation Scatterplot ",name_index,".png" )
ggsave(file_name, width = 8, height = 5)
# Create a dataframe with the frequency of each value in the 'x' column
frequency_data <- dataframe %>%
group_by(agea,total_trust) %>%
summarize(freq = n())
# Using ggplot2 with size based on frequency
ggplot(frequency_data, aes(x = agea, y = total_trust, size = freq)) +
geom_point() +
labs(title = "Scatterplot with Point Size based on Frequency", x = "Age", y = "Total Trust") +
scale_size_continuous(range = c(1, 8))  # Adjust the size range as needed
file_name = paste0(file_directory,"Age Scatterplot ",name_index,".png" )
ggsave(file_name, width = 8, height = 5)
# Create a dataframe with the frequency of each value in the 'x' column
frequency_data <- dataframe %>%
group_by(hinctnta,total_trust) %>%
summarize(freq = n())
# Using ggplot2 with size based on frequency
ggplot(frequency_data, aes(x = hinctnta, y = total_trust, size = freq)) +
geom_point() +
labs(title = "Scatterplot with Point Size based on Frequency", x = "Household Income", y = "Total Trust") +
scale_size_continuous(range = c(1, 8))  # Adjust the size range as needed
file_name = paste0(file_directory,"Household Income Scatterplot ",name_index,".png" )
ggsave(file_name, width = 8, height = 5)
}
library(tidyverse)
library(haven)
#load ESS data
load('ESS9e03_2.Rda')
#create filtered dataset from Germany, respondent above age of 18
Data_DE <- ESS9 %>% filter(cntry == "DE", agea >= 18)
